name: Build and Push Docker Image

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ "main" ]
  release:
    types: [ "published" ]

jobs:

  build-and-push:

    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: fingerprint_backend_spring
      DOCKERHUB_USERNAME: kyumin1227
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run MySQL container for tests
        run: |
          docker run -d \
            --name mysql-test \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=fingerprint_db_test \
            -e MYSQL_USER=test \
            -e MYSQL_PASSWORD=test \
            -p 3306:3306 \
            --health-cmd="mysqladmin ping --silent" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            mysql:latest

      - name: Wait for MySQL to be healthy
        run: |
          for i in {1..10}; do
            status=$(docker inspect --format='{{.State.Health.Status}}' mysql-test)
            echo "MySQL container status: $status"
            if [ "$status" == "healthy" ]; then
              echo "MySQL is healthy!"
              exit 0
            fi
            sleep 5
          done
          echo "MySQL did not become healthy in time." >&2
          exit 1

      - name: Build with Gradle (workflow profile)
        run: ./gradlew build

      - name: Cleanup MySQL container
        if: always()
        run: docker rm -f mysql-test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_USERNAME }}
          password: ${{ env.GITHUB_TOKEN }}

      - name: Set image tags
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=latest" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw, value=${{ steps.tag.outputs.TAG_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
